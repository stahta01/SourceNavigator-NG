source testutil.tcl

# ---------------------------------------------
# The first series of token tests check to make
# sure the browser is properly splitting the
# text input into tokens and dumping them
# to a file in a known format.
# ---------------------------------------------

tcltest::test tokens-1.0 { parse into tokens } {
    browse_tokens [save_file f.php {
<HTML>
My HTML is $cash=money.
</HTML>
}]
} {0 HTML "\n<HTML>\nMy HTML is $cash=money.\n</HTML>\n" 1.0 5.0}

tcltest::test tokens-1.1 { parse into tokens } {
    browse_tokens [save_file f.php {HTML
<?//COMMENT?>
HTML}]
} {0 HTML "HTML\n<?" 1.0 2.2
1 COMMENT "COMMENT" 2.2 2.11
2 HTML "?>\nHTML" 2.11 3.4}

tcltest::test tokens-1.2 { parse into tokens } {
    browse_tokens [save_file f.php {HTML
<?//COMMENT?>}]
} {0 HTML "HTML\n<?" 1.0 2.2
1 COMMENT "COMMENT" 2.2 2.11
2 HTML "?>" 2.11 2.13}

tcltest::test tokens-1.3 { parse into tokens } {
    browse_tokens [save_file f.php {HTML
<?php//COMMENT?>
HTML}]
} {0 HTML "HTML\n<?php" 1.0 2.5
1 COMMENT "COMMENT" 2.5 2.14
2 HTML "?>\nHTML" 2.14 3.4}

tcltest::test tokens-1.4 { parse into tokens } {
    browse_tokens [save_file f.php {HTML
<?PHP$var?>
HTML}]
} {0 HTML "HTML\n<?PHP" 1.0 2.5
1 VARIABLE "var" 2.5 2.9
2 HTML "?>\nHTML" 2.9 3.4}

tcltest::test tokens-1.5 { parse into tokens } {
    browse_tokens [save_file f.php {
<?=$var?>
}]
} {0 HTML "\n<?=" 1.0 2.3
1 VARIABLE "var" 2.3 2.7
2 HTML "?>\n" 2.7 3.0}



tcltest::test tokens-2.0 { parse into tokens } {
    filter_tokens HTML [browse_tokens [save_file f.php {
<?
#My Comment
?>
}]]
} {1 COMMENT "My Comment" 3.0 3.11}

tcltest::test tokens-2.1 { parse into tokens } {
    filter_tokens HTML [browse_tokens [save_file f.php {
<?
//My Comment
?>
}]]
} {1 COMMENT "My Comment" 3.0 3.12}

tcltest::test tokens-2.2 { parse into tokens } {
    filter_tokens HTML [browse_tokens [save_file f.php {
<?
/*My Comment*/
?>
}]]
} {1 COMMENT "My Comment" 3.0 3.14}

tcltest::test tokens-2.3 { parse into tokens } {
    filter_tokens HTML [browse_tokens [save_file f.php {
<?
/*A "quoted" comment*/
?>
}]]
} {1 COMMENT "A \"quoted\" comment" 3.0 3.22}

tcltest::test tokens-2.4 { parse into tokens } {
    filter_tokens HTML [browse_tokens [save_file f.php {
<?
/*Another
Comment*/
?>
}]]
} {1 COMMENT "Another\nComment" 3.0 4.9}


tcltest::test tokens-3.0 { parse into tokens } {
    filter_tokens HTML [browse_tokens [save_file f.php {
<?
$var
?>
}]]
} {1 VARIABLE "var" 3.0 3.4}

tcltest::test tokens-3.1 { parse into tokens } {
    filter_tokens HTML [browse_tokens [save_file f.php {
<?
$var=1
?>
}]]
} {1 VARIABLE "var" 3.0 3.4
2 ASSIGNMENT_OPERATOR "" 3.4 3.5
3 SOMEWORD "1" 3.5 3.6}

tcltest::test tokens-3.2 { parse into tokens } {
    filter_tokens HTML [browse_tokens [save_file f.php {
<?
$var[]=1
?>
}]]
} {1 VARIABLE "var" 3.0 3.4
2 OPEN_BRACKET "" 3.4 3.5
3 CLOSE_BRACKET "" 3.5 3.6
4 ASSIGNMENT_OPERATOR "" 3.6 3.7
5 SOMEWORD "1" 3.7 3.8}

tcltest::test tokens-3.3 { parse into tokens } {
    filter_tokens HTML [browse_tokens [save_file f.php {
<?
$foo = &$bar;
?>
}]]
} {1 VARIABLE "foo" 3.0 3.4
2 ASSIGNMENT_OPERATOR "" 3.5 3.6
3 REFERENCE_OPERATOR "" 3.7 3.8
4 VARIABLE "bar" 3.8 3.12
5 SEMICOLON "" 3.12 3.13}

tcltest::test tokens-3.4 { parse into tokens } {
    filter_tokens HTML [browse_tokens [save_file f.php {
<?
$var++;
--$var;
?>
}]]
} {1 VARIABLE "var" 3.0 3.4
2 INCREMENT_OPERATORS "++" 3.4 3.6
3 SEMICOLON "" 3.6 3.7
4 INCREMENT_OPERATORS "--" 4.0 4.2
5 VARIABLE "var" 4.2 4.6
6 SEMICOLON "" 4.6 4.7}

tcltest::test tokens-3.5 { parse into tokens } {
    filter_tokens HTML [browse_tokens [save_file f.php {
<?
\$myvar;
?>
}]]
} {1 SOMEWORD "\\$" 3.0 3.2
2 SOMEWORD "myvar" 3.2 3.7
3 SEMICOLON "" 3.7 3.8}

tcltest::test tokens-3.6 { parse into tokens } {
    filter_tokens HTML [browse_tokens [save_file f.php {
<?
<<<END
/*not-comment*/
END;
?>
}]]
} {1 DOUBLE_QUOTED_STRING "/*not-comment*/" 3.0 5.3
2 SEMICOLON "" 5.3 5.4}

tcltest::test tokens-3.7 { parse into tokens } {
    filter_tokens HTML [browse_tokens [save_file f.php {
<?
<<<END
/*not-comment*/
/*not-comment*/
END;
?>
}]]
} {1 DOUBLE_QUOTED_STRING "/*not-comment*/\n/*not-comment*/" 3.0 6.3
2 SEMICOLON "" 6.3 6.4}


tcltest::test tokens-4.0 { unknown tokens } {
    filter_tokens HTML [browse_tokens [save_file f.php {
<?
!!$var;
?>
}]]
} {1 UNKNOWN "!" 3.0 3.1
2 UNKNOWN "!" 3.1 3.2
3 VARIABLE "var" 3.2 3.6
4 SEMICOLON "" 3.6 3.7}

tcltest::test tokens-4.1 { unknown tokens } {
    filter_tokens HTML [browse_tokens [save_file f.php {
<?
$var ~= 1;
?>
}]]
} {1 VARIABLE "var" 3.0 3.4
2 UNKNOWN "~" 3.5 3.6
3 ASSIGNMENT_OPERATOR "" 3.6 3.7
4 SOMEWORD "1" 3.8 3.9
5 SEMICOLON "" 3.9 3.10}


tcltest::test tokens-5.0 { double quoted string tokens } {
    filter_tokens HTML [browse_tokens [save_file f.php {
<?
"hi"
?>
}]]
} {1 DOUBLE_QUOTED_STRING "hi" 3.0 3.4}

tcltest::test tokens-5.1 { double quoted string tokens } {
    filter_tokens HTML [browse_tokens [save_file f.php {
<?
"hi
there"
?>
}]]
} {1 DOUBLE_QUOTED_STRING "hi\nthere" 3.0 4.6}

tcltest::test tokens-5.2 { double quoted string tokens } {
    filter_tokens HTML [browse_tokens [save_file f.php {
<?
"hi\"there\""
?>
}]]
} {1 DOUBLE_QUOTED_STRING "hi\\\"there\\\"" 3.0 3.13}

tcltest::test tokens-5.3 { double quoted string tokens } {
    filter_tokens HTML [browse_tokens [save_file f.php {
<?
"hi\\""
?>
}]]
} {1 DOUBLE_QUOTED_STRING "hi\\\\\"" 3.0 3.7}

tcltest::test tokens-6.0 { keyword tokens } {
    filter_tokens HTML [browse_tokens [save_file f.php {
<?
include "file";
?>
}]]
} {1 INCLUDE_KEYWORD "include" 3.0 3.7
2 DOUBLE_QUOTED_STRING "file" 3.8 3.14
3 SEMICOLON "" 3.14 3.15}

tcltest::test tokens-6.1 { keyword tokens } {
    filter_tokens HTML [browse_tokens [save_file f.php {
<?
1 and 2
?>
}]]
} {1 SOMEWORD "1" 3.0 3.1
2 KEYWORD "and" 3.2 3.5
3 SOMEWORD "2" 3.6 3.7}

tcltest::test tokens-6.2 { keyword tokens } {
    filter_tokens HTML [browse_tokens [save_file f.php {
<?
if (1) {}
?>
}]]
} {1 KEYWORD "if" 3.0 3.2
2 OPEN_PAREN "" 3.3 3.4
3 SOMEWORD "1" 3.4 3.5
4 CLOSE_PAREN "" 3.5 3.6
5 OPEN_BRACE "" 3.7 3.8
6 CLOSE_BRACE "" 3.8 3.9}


# ---------------------------------------------
# These next tests check the highlighter function
# of a browser. When invoked with the -h and -s
# options, a browser will emit a file that
# contains text tags and file locations that
# will be used by the editor to highlight text.
# ---------------------------------------------

tcltest::test highlight-1.0 { highlight } {
    browse_highlights [save_file f.php {
<HTML>
My HTML is $cash=money.
</HTML>
}]
} {}

tcltest::test highlight-1.1 { highlight } {
    browse_highlights [save_file f.php {
<?
// Comment
?>
}]
} {1 rem 3.0 3.10}


tcltest::test highlight-1.2 { highlight } {
    browse_highlights [save_file f.php {
<?
"String"
?>
}]
} {1 str 3.0 3.8}

tcltest::test highlight-1.3 { highlight } {
    browse_highlights [save_file f.php {
<?
'String'
?>
}]
} {1 str 3.0 3.8}

tcltest::test highlight-1.4 { highlight } {
    browse_highlights [save_file f.php {
<?
<<< END
String
END;
?>
}]
} {1 str 3.0 5.3}

tcltest::test highlight-1.5 { highlight } {
    browse_highlights [save_file f.php {
<?
'$var'
?>
}]
} {1 str 3.0 3.6}

tcltest::test highlight-1.6 { highlight } {
    browse_highlights [save_file f.php {
<?
"$var"
?>
}]
} {1 str 3.0 3.6
2 gv 3.1 3.5}

tcltest::test highlight-1.7 { highlight } {
    browse_highlights [save_file f.php {
<?
print <<<END
hi $var
END;
?>
}]
} {1 key 3.0 3.5
2 str 3.6 5.3
3 gv 4.3 4.7}


tcltest::test highlight-1.8 { highlight } {
    browse_highlights [save_file f.php {
<?
function foo() { "$val" }
?>
}]
} {1 key 3.0 3.8
2 str 3.17 3.23
3 lv 3.18 3.22}


tcltest::test highlight-1.9 { highlight special keywords } {
    browse_highlights [save_file f.php {
<?
function foo($var="default") {}
global $var;
include "f1.php";
include_once "f1.php";
require "f1.php";
require_once "f1.php";
?>
}]
} {1 key 3.0 3.8
2 lv 3.13 3.17
3 str 3.18 3.27
4 key 4.0 4.6
5 key 5.0 5.7
6 str 5.8 5.16
7 key 6.0 6.12
8 str 6.13 6.21
9 key 7.0 7.7
10 str 7.8 7.16
11 key 8.0 8.12
12 str 8.13 8.21}

tcltest::test highlight-1.10 { highlight other keywords } {
    browse_highlights [save_file f.php {
<?
and
or
xor
array
as
break
case
cfunction
class
const
continue
declare
default
die
do
echo
else
elseif
empty
enddeclare
endfor
endforeach
endif
endswitch
endwhile
eval
exit
extends
for
foreach
if
isset
list
new
old_function
print
return
static
switch
unset
use
var
while
__FUNCTION__
__FILE__
__CLASS__
__LINE__
?>
}]
} {1 key 3.0 3.3
2 key 4.0 4.2
3 key 5.0 5.3
4 key 6.0 6.5
5 key 7.0 7.2
6 key 8.0 8.5
7 key 9.0 9.4
8 key 10.0 10.9
9 key 11.0 11.5
10 key 12.0 12.5
11 key 13.0 13.8
12 key 14.0 14.7
13 key 15.0 15.7
14 key 16.0 16.3
15 key 17.0 17.2
16 key 18.0 18.4
17 key 19.0 19.4
18 key 20.0 20.6
19 key 21.0 21.5
20 key 22.0 22.10
21 key 23.0 23.6
22 key 24.0 24.10
23 key 25.0 25.5
24 key 26.0 26.9
25 key 27.0 27.8
26 key 28.0 28.4
27 key 29.0 29.4
28 key 30.0 30.7
29 key 31.0 31.3
30 key 32.0 32.7
31 key 33.0 33.2
32 key 34.0 34.5
33 key 35.0 35.4
34 key 36.0 36.3
35 key 37.0 37.12
36 key 38.0 38.5
37 key 39.0 39.6
38 key 40.0 40.6
39 key 41.0 41.6
40 key 42.0 42.5
41 key 43.0 43.3
42 key 44.0 44.3
43 key 45.0 45.5
44 key 46.0 46.12
45 key 47.0 47.8
46 key 48.0 48.9
47 key 49.0 49.8}



# ---------------------------------------------
# The rest of the tests check for output that
# can be understood by dbimp. Generated tokens
# are processed and matched to known constructs
# like function and variable assignments.
# ---------------------------------------------


tcltest::test mode-1.0 { skip html code } {
    browse [save_file f.php {
<HTML>
My HTML is $cash=money.
</HTML>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
}


tcltest::test mode-1.1 { skip html code } {
    browse [save_file f.php {
<HTML>
function foo() {}
</HTML>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
}


tcltest::test mode-2.0 { php mode } {
    browse [save_file f.php {
<?
$mode="php";
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_GLOB_VAR_DEF;mode<>000003.000<>f.php;3.5<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.000<>#<>mode<>gv;3.5<>3.0<>3.5<>{}
}

tcltest::test mode-2.1 { php mode } {
    browse [save_file f.php {
<? $mode1="php"; ?>
$mode2="html";
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_GLOB_VAR_DEF;mode1<>000002.003<>f.php;2.9<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000002.003<>#<>mode1<>gv;2.9<>2.3<>2.9<>{}
}

tcltest::test mode-2.2 { php mode } {
    browse [save_file f.php {
$mode1="html";
<? $mode2="php"; ?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_GLOB_VAR_DEF;mode2<>000003.003<>f.php;3.9<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.003<>#<>mode2<>gv;3.9<>3.3<>3.9<>{}
}

tcltest::test mode-2.3 { html->php->html->php mode } {
    browse [save_file f.php {
$mode1="html";
<? $mode2="php"; ?>
$mode3="html";
<? $mode4="php"; ?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_GLOB_VAR_DEF;mode2<>000003.003<>f.php;3.9<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.003<>#<>mode2<>gv;3.9<>3.3<>3.9<>{}
PAF_GLOB_VAR_DEF;mode4<>000005.003<>f.php;5.9<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000005.003<>#<>mode4<>gv;5.9<>5.3<>5.9<>{}
}

tcltest::test mode-2.4 { php mode } {
    browse [save_file f.php {
<?php
$mode="php";
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_GLOB_VAR_DEF;mode<>000003.000<>f.php;3.5<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.000<>#<>mode<>gv;3.5<>3.0<>3.5<>{}
}

tcltest::test mode-2.5 { php mode } {
    browse [save_file f.php {
<? function foo() {} ?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_FUNC_DEF;foo<>000002.003<>f.php;2.20<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000002.003<>#<>foo<>fu;2.20<>2.12<>2.15<>{}
}

tcltest::test var-1.0 { var write } {
    browse [save_file f.php {
<?
$var=1;
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_GLOB_VAR_DEF;var<>000003.000<>f.php;3.4<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.000<>#<>var<>gv;3.4<>3.0<>3.4<>{}
}

tcltest::test var-1.1 { var read } {
    browse [save_file f.php {
<?
print $var;
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
}

tcltest::test var-1.2 { 2 var writes, checks column } {
    browse [save_file f.php {
<?
$var=1;$var=1;
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_GLOB_VAR_DEF;var<>000003.000<>f.php;3.4<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.000<>#<>var<>gv;3.4<>3.0<>3.4<>{}
PAF_GLOB_VAR_DEF;var<>000003.007<>f.php;3.11<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.007<>#<>var<>gv;3.11<>3.7<>3.11<>{}
}

tcltest::test var-1.2 { read then write, checks column } {
    browse [save_file f.php {
<?
$var;$var=1;
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_GLOB_VAR_DEF;var<>000003.005<>f.php;3.9<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.005<>#<>var<>gv;3.9<>3.5<>3.9<>{}
}

# FIXME: Should the global statement act as the variable define here?

tcltest::test var-1.3 { var write } {
    browse [save_file f.php {
<?
function foo() {
global $var;
$var = 1;
}
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_GLOB_VAR_DEF;var<>000005.000<>f.php;5.4<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000005.000<>#<>var<>gv;5.4<>5.0<>5.4<>{}
PAF_FUNC_DEF;foo<>000003.000<>f.php;6.1<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.000<>#<>foo<>fu;6.1<>3.9<>3.12<>{}
}

tcltest::test var-1.4 { var read } {
    browse [save_file f.php {
<?
function foo() {
global $var;
print $var;
}
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_FUNC_DEF;foo<>000003.000<>f.php;6.1<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.000<>#<>foo<>fu;6.1<>3.9<>3.12<>{}
}

# FIXME: The Tcl parser defines local var symbols only when
# the -l flag is passed. Should we do this too?

tcltest::test var-1.5 { local var write } {
    browse [save_file f.php {
<?
function foo() {
$var = 1;
}
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_LOCAL_VAR_DEF;var<>000004.000<>f.php;4.4<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000004.000<>#<>var<>lv;4.4<>4.0<>4.4<>{}
PAF_FUNC_DEF;foo<>000003.000<>f.php;5.1<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.000<>#<>foo<>fu;5.1<>3.9<>3.12<>{}
}

tcltest::test var-1.6 { local var read } {
    browse [save_file f.php {
<?
function foo() {
print $var;
}
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_FUNC_DEF;foo<>000003.000<>f.php;5.1<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.000<>#<>foo<>fu;5.1<>3.9<>3.12<>{}
}

tcltest::test var-1.7 { var increment } {
    browse [save_file f.php {
<?
$var++;
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_GLOB_VAR_DEF;var<>000003.000<>f.php;3.4<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.000<>#<>var<>gv;3.4<>3.0<>3.4<>{}
}

tcltest::test var-1.8 { var decrement } {
    browse [save_file f.php {
<?
--$var;
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_GLOB_VAR_DEF;var<>000003.002<>f.php;3.6<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.002<>#<>var<>gv;3.6<>3.2<>3.6<>{}
}

tcltest::test var-1.9 { var decrement, ignore increment (syntax error) } {
    browse [save_file f.php {
<?
--$var++;
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_GLOB_VAR_DEF;var<>000003.002<>f.php;3.6<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.002<>#<>var<>gv;3.6<>3.2<>3.6<>{}
}

tcltest::test var-1.10 { array var increment } {
    browse [save_file f.php {
<?
$var[0]++;
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_GLOB_VAR_DEF;var<>000003.000<>f.php;3.4<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.000<>#<>var<>gv;3.4<>3.0<>3.4<>{}
}

tcltest::test var-1.11 { array var decrement } {
    browse [save_file f.php {
<?
--$var[0];
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_GLOB_VAR_DEF;var<>000003.002<>f.php;3.6<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.002<>#<>var<>gv;3.6<>3.2<>3.6<>{}
}

tcltest::test var-2.0 { var write xref } {
    browse_xref [save_file f.php {
<?
$var=1;
?>
}]
} {PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>w<>000003<>f.php;<>
}

tcltest::test var-2.1 { var read xref } {
    browse_xref [save_file f.php {
<?
print $var;
?>
}]
} {PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>r<>000003<>f.php;<>
}

tcltest::test var-2.2 { global statement is not a var read } {
    browse_xref [save_file f.php {
<?
function foo() {
    global $var;
}
?>
}]
} {}

tcltest::test var-2.3 { global var write xref } {
    browse_xref [save_file f.php {
<?
function foo() {
global $var;
$var=1;
}
?>
}]
} {PAF_CROSS_REF;#<>foo<>fu<>#<>var<>gv<>w<>000005<>f.php;<>
}

tcltest::test var-2.4 { global var read xref } {
    browse_xref [save_file f.php {
<?
function foo() {
global $var;
print $var;
}
?>
}]
} {PAF_CROSS_REF;#<>foo<>fu<>#<>var<>gv<>r<>000005<>f.php;<>
}


tcltest::test var-2.5 { no local var xref by default } {
    browse_xref [save_file f.php {
<?
function foo() {
$var=1;
}
?>
}]
} {}

tcltest::test var-2.6 { local var write xref } {
    browse_xref [save_file f.php {
<?
function foo() {
$var=1;
}
?>
}] {-l}
} {PAF_CROSS_REF;#<>foo<>fu<>#<>var<>lv<>w<>000004<>f.php;<>
}

tcltest::test var-2.7 { no local var xref by default } {
    browse_xref [save_file f.php {
<?
function foo() {
print $var;
}
?>
}]
} {}

tcltest::test var-2.8 { local var read xref } {
    browse_xref [save_file f.php {
<?
function foo() {
print $var;
}
?>
}] {-l}
} {PAF_CROSS_REF;#<>foo<>fu<>#<>var<>lv<>r<>000004<>f.php;<>
}


tcltest::test var-2.9 { local var write xref } {
    browse_xref [save_file f.php {
<?
function foo() {
global $nar;
$var=1;
}
?>
}] {-l}
} {PAF_CROSS_REF;#<>foo<>fu<>#<>var<>lv<>w<>000005<>f.php;<>
}

tcltest::test var-2.10 { local var read xref } {
    browse_xref [save_file f.php {
<?
function foo() {
global $nar;
print $var;
}
?>
}] {-l}
} {PAF_CROSS_REF;#<>foo<>fu<>#<>var<>lv<>r<>000005<>f.php;<>
}

tcltest::test var-2.11 { multiple vars in global statement } {
    browse_xref [save_file f.php {
<?
function foo() {
global $var1, $var2;
print $var1;
print $var2;
}
?>
}]
} {PAF_CROSS_REF;#<>foo<>fu<>#<>var1<>gv<>r<>000005<>f.php;<>
PAF_CROSS_REF;#<>foo<>fu<>#<>var2<>gv<>r<>000006<>f.php;<>
}

tcltest::test var-2.12 { multiple vars in global statement } {
    browse_xref [save_file f.php {
<?
function foo() {
global $var1, $var2, $var3;
print $var1;
print $var2;
print $var3;
}
?>
}]
} {PAF_CROSS_REF;#<>foo<>fu<>#<>var1<>gv<>r<>000005<>f.php;<>
PAF_CROSS_REF;#<>foo<>fu<>#<>var2<>gv<>r<>000006<>f.php;<>
PAF_CROSS_REF;#<>foo<>fu<>#<>var3<>gv<>r<>000007<>f.php;<>
}


tcltest::test var-3.0 { array var write xref } {
    browse_xref [save_file f.php {
<?
$var[]=1;
?>
}]
} {PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>w<>000003<>f.php;<>
}

tcltest::test var-3.1 { array var write xref } {
    browse_xref [save_file f.php {
<?
$var[0]=1;
?>
}]
} {PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>w<>000003<>f.php;<>
}

tcltest::test var-3.2 { array var write xref } {
    browse_xref [save_file f.php {
<?
$var['name']=1;
?>
}]
} {PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>w<>000003<>f.php;<>
}

tcltest::test var-3.3 { array var write xref } {
    browse_xref [save_file f.php {
<?
$var["name"]=1;
?>
}]
} {PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>w<>000003<>f.php;<>
}

tcltest::test var-3.4 { array var write xref } {
    browse_xref [save_file f.php {
<?
$var[1][]=1;
?>
}]
} {PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>w<>000003<>f.php;<>
}

tcltest::test var-3.5 { array var write xref } {
    browse_xref [save_file f.php {
<?
$var[1][0]=1;
?>
}]
} {PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>w<>000003<>f.php;<>
}

tcltest::test var-3.6 { array var write xref } {
    browse_xref [save_file f.php {
<?
$var["hello"]['there']=1;
?>
}]
} {PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>w<>000003<>f.php;<>
}


tcltest::test var-4.0 { array var read xref } {
    browse_xref [save_file f.php {
<?
print $var[];
?>
}]
} {PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>r<>000003<>f.php;<>
}

tcltest::test var-4.1 { array var read xref } {
    browse_xref [save_file f.php {
<?
print $var[0];
?>
}]
} {PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>r<>000003<>f.php;<>
}

tcltest::test var-4.2 { array var read xref } {
    browse_xref [save_file f.php {
<?
print $var['one'];
?>
}]
} {PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>r<>000003<>f.php;<>
}

tcltest::test var-4.3 { array var read xref } {
    browse_xref [save_file f.php {
<?
print $var["one"];
?>
}]
} {PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>r<>000003<>f.php;<>
}

tcltest::test var-4.4 { array var read xref } {
    browse_xref [save_file f.php {
<?
print $var[0][];
?>
}]
} {PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>r<>000003<>f.php;<>
}

tcltest::test var-4.5 { array var read xref } {
    browse_xref [save_file f.php {
<?
print $var["hello"][0];
?>
}]
} {PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>r<>000003<>f.php;<>
}

tcltest::test var-4.6 { array var read xref } {
    browse_xref [save_file f.php {
<?
print $var["hello"]["mello"]["fellow"];
?>
}]
} {PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>r<>000003<>f.php;<>
}


tcltest::test var-5.0 { read and write xrefs } {
    browse_xref [save_file f.php {
<?
$var[$one] = 1;
?>
}]
} {PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>w<>000003<>f.php;<>
PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>one<>gv<>r<>000003<>f.php;<>
}

tcltest::test var-5.1 { read and write xrefs } {
    browse_xref [save_file f.php {
<?
$var[$one];
?>
}]
} {PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>r<>000003<>f.php;<>
PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>one<>gv<>r<>000003<>f.php;<>
}

tcltest::test var-5.2 { read and write xrefs } {
    browse_xref [save_file f.php {
<?
$var[$one=0];
?>
}]
} {PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>r<>000003<>f.php;<>
PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>one<>gv<>w<>000003<>f.php;<>
}

# FIXME: Complex subexpressions are not currently supported
# because we can't match any expression without generating
# a longest possible match. Might look into improve this in
# the future by matching and then using yyless(), not clear
# if that would work properly. Currently, we fail to generate
# a write xref and generate a read xref instead.

tcltest::test var-5.3 { read and write xrefs } {knownbug} {
    browse_xref [save_file f.php {
<?
$var[$one=0] = 1;
?>
}]
} {PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>w<>000003<>f.php;<>
PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>one<>gv<>w<>000003<>f.php;<>
}

tcltest::test var-5.4 { read and write xrefs } {knownbug} {
    browse_xref [save_file f.php {
<?
$var["one"."two"] = 1;
?>
}]
} {PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>w<>000003<>f.php;<>
}

tcltest::test var-5.5 { read and write xrefs } {
    browse_xref [save_file f.php {
<?
$var++;
?>
}]
} {PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>r<>000003<>f.php;<>
PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>w<>000003<>f.php;<>
}

tcltest::test var-5.6 { read and write xrefs } {
    browse_xref [save_file f.php {
<?
$var = $var + 1;
$var+=1;
$var++;
--$var;
?>
}]
} {PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>w<>000003<>f.php;<>
PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>r<>000003<>f.php;<>
PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>r<>000004<>f.php;<>
PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>w<>000004<>f.php;<>
PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>r<>000005<>f.php;<>
PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>w<>000005<>f.php;<>
PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>r<>000006<>f.php;<>
PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>w<>000006<>f.php;<>
}

tcltest::test var-5.7 { read and write xrefs } {
    browse_xref [save_file f.php {
<?
$var["$str"] = 1;
?>
}]
} {PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>w<>000003<>f.php;<>
PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>str<>gv<>r<>000003<>f.php;<>
}

tcltest::test comment-1.0 { comment } {
    browse [save_file f.php {
<?
//$var=1;
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
}

tcltest::test comment-1.1 { comment } {
    browse [save_file f.php {
<?
	//$var=1;
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
}

tcltest::test comment-1.2 { insert comment xref } {
    browse_xref [save_file f.php {
<?
//$var=1;
?>
}] {-r}
} {PAF_COMMENT_DEF;f.php<>000003.002<>#<>#;$var=1;
}

tcltest::test comment-1.3 { insert comment xref } {
    browse_xref [save_file f.php {
<?
	//$var=1;
?>
}] {-r}
} {PAF_COMMENT_DEF;f.php<>000003.003<>#<>#;$var=1;
}

tcltest::test comment-1.4 { comment } {
    browse [save_file f.php {
<?
/*$var=1;*/
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
}

tcltest::test comment-1.5 { insert comment xref } {
    browse_xref [save_file f.php {
<?
/*$var=1;*/
?>
}] {-r}
} {PAF_COMMENT_DEF;f.php<>000003.002<>#<>#;$var=1;
}

tcltest::test comment-1.6 { insert comment xref } {
    browse_xref [save_file f.php {
<?
/*
$var=1;
*/
?>
}] {-r}
} "PAF_COMMENT_DEF;f.php<>000003.002<>#<>#;\xFF\$var=1;\xFF\n"


tcltest::test comment-1.7 { insert comment xref } {
    browse_xref [save_file f.php {<?/*
 * Hello
 */?>
}] {-r}
} "PAF_COMMENT_DEF;f.php<>000001.004<>#<>#;\xFF * Hello\xFF \n"

tcltest::test comment-1.8 { insert comment xref } {
    browse_xref [save_file f.php {<?
/*
* Hello
*/
?>
}] {-r}
} "PAF_COMMENT_DEF;f.php<>000002.002<>#<>#;\xFF* Hello\xFF\n"

tcltest::test comment-1.9 { insert comment xref } {
    browse_xref [save_file f.php {
<?
/*
 * Comments *
 * With * //* Stuff in them
 * are tricky */
?>
}] {-r}
} "PAF_COMMENT_DEF;f.php<>000003.002<>#<>#;\xFF * Comments *\xFF * With * //* Stuff in them\xFF * are tricky \n"

tcltest::test comment-1.10 { insert comment xref } {
    browse_xref [save_file f.php {
<?
/*********
 * Hello *
 *********/
?>
}] {-r}
} "PAF_COMMENT_DEF;f.php<>000003.002<>#<>#;********\xFF * Hello *\xFF ********\n"

tcltest::test comment-1.11 { can't leave multi line comment mode with ?> } {
    browse_xref [save_file f.php {
<?
/*Comment ?>ONE<? Text*/
?>
}] {-r}
} {PAF_COMMENT_DEF;f.php<>000003.002<>#<>#;Comment ?>ONE<? Text
}

tcltest::test comment-1.12 { hit EOF in comment } {
    browse [save_file f.php {
<?
/*
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
}

tcltest::test comment-1.13 { hit EOF in comment } {
    browse_xref [save_file f.php {
<?
/*
?>
}] {-r}
} [format {PAF_COMMENT_DEF;f.php<>000003.002<>#<>#;%s%s%s%s} \xFF ?> \xFF \n]

tcltest::test comment-1.14 { double quotes in comment } {
    browse_xref [save_file f.php {
<?
/*Comment "Text"*/
?>
}] {-r}
} {PAF_COMMENT_DEF;f.php<>000003.002<>#<>#;Comment "Text"
}

tcltest::test comment-1.14 { no ws before // } {
    browse_xref [save_file f.php {
<?
"s";//Comment
?>
}] {-r}
} {PAF_COMMENT_DEF;f.php<>000003.006<>#<>#;Comment
}

tcltest::test comment-1.15 { shell style comment } {
    browse_xref [save_file f.php {
<?
#Comment
?>
}] {-r}
} {PAF_COMMENT_DEF;f.php<>000003.001<>#<>#;Comment
}

tcltest::test comment-1.16 { line comment ends at ?> } {
    browse_xref [save_file f.php {
<?//Comment?>
}] {-r}
} {PAF_COMMENT_DEF;f.php<>000002.004<>#<>#;Comment
}

tcltest::test comment-1.17 { line comment ends at ?> } {
    browse_xref [save_file f.php {
<?#Comment?>
}] {-r}
} {PAF_COMMENT_DEF;f.php<>000002.003<>#<>#;Comment
}

tcltest::test comment-1.18 { line comment ends at ?> } {
    browse_xref [save_file f.php {
<?//Comment1?>HTML<?#Comment2?>
}] {-r}
} {PAF_COMMENT_DEF;f.php<>000002.004<>#<>#;Comment1
PAF_COMMENT_DEF;f.php<>000002.021<>#<>#;Comment2
}


tcltest::test comment-2.0 { function with a comment } {
    browse [save_file f.php {
<?
function foo() { /* no-op */ }
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_FUNC_DEF;foo<>000003.000<>f.php;3.30<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.000<>#<>foo<>fu;3.30<>3.9<>3.12<>{}
}

tcltest::test comment-2.1 { insert comment xref in a function } {
    browse_xref [save_file f.php {
<?
function foo() {
//no-op
    return;
}
?>
}] {-r}
} {PAF_COMMENT_DEF;f.php<>000004.002<>#<>#;no-op
}

tcltest::test comment-2.2 { insert comment xref in a function } {
    browse_xref [save_file f.php {
<?
function foo() {
/*no-op*/
    return;
}
?>
}] {-r}
} {PAF_COMMENT_DEF;f.php<>000004.002<>#<>#;no-op
}

tcltest::test comment-2.3 { insert comment xref in a function } {
    browse_xref [save_file f.php {
<?
function foo() {
    /*no-op*/
    bar();
}
?>
}] {-r}
} {PAF_COMMENT_DEF;f.php<>000004.006<>#<>#;no-op
PAF_CROSS_REF;#<>foo<>fu<>#<>bar<>fu<>p<>000005<>f.php;<>
}

tcltest::test comment-2.4 { insert comment xref in a function } {
    browse_xref [save_file f.php {
<?
function foo() {
    bar();
    /*no-op*/
}
?>
}] {-r}
} {PAF_COMMENT_DEF;f.php<>000005.006<>#<>#;no-op
PAF_CROSS_REF;#<>foo<>fu<>#<>bar<>fu<>p<>000004<>f.php;<>
}



tcltest::test string-1.0 { double quoted string } {
    browse [save_file f.php {
<?
$var = "";
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_GLOB_VAR_DEF;var<>000003.000<>f.php;3.4<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.000<>#<>var<>gv;3.4<>3.0<>3.4<>{}
}

tcltest::test string-1.1 { single quoted string } {
    browse [save_file f.php {
<?
$var = '';
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_GLOB_VAR_DEF;var<>000003.000<>f.php;3.4<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.000<>#<>var<>gv;3.4<>3.0<>3.4<>{}
}

tcltest::test string-1.2 { double quoted string } {
    browse [save_file f.php {
<?
$var = "value";
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_GLOB_VAR_DEF;var<>000003.000<>f.php;3.4<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.000<>#<>var<>gv;3.4<>3.0<>3.4<>{}
}

tcltest::test string-1.3 { single quoted string } {
    browse [save_file f.php {
<?
$var = 'value';
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_GLOB_VAR_DEF;var<>000003.000<>f.php;3.4<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.000<>#<>var<>gv;3.4<>3.0<>3.4<>{}
}

tcltest::test string-1.4 { double quoted string } {
    browse [save_file f.php {
<?
$var1 = "value";
$var2 = "value";
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_GLOB_VAR_DEF;var1<>000003.000<>f.php;3.5<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.000<>#<>var1<>gv;3.5<>3.0<>3.5<>{}
PAF_GLOB_VAR_DEF;var2<>000004.000<>f.php;4.5<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000004.000<>#<>var2<>gv;4.5<>4.0<>4.5<>{}
}

tcltest::test string-1.5 { single quoted string } {
    browse [save_file f.php {
<?
$var1 = 'value';
$var2 = 'value';
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_GLOB_VAR_DEF;var1<>000003.000<>f.php;3.5<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.000<>#<>var1<>gv;3.5<>3.0<>3.5<>{}
PAF_GLOB_VAR_DEF;var2<>000004.000<>f.php;4.5<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000004.000<>#<>var2<>gv;4.5<>4.0<>4.5<>{}
}

tcltest::test string-1.6 { double quoted string } {
    browse [save_file f.php {
<?
$var1 = "\"" .
    "\"";
$var2 = 1;
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_GLOB_VAR_DEF;var1<>000003.000<>f.php;3.5<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.000<>#<>var1<>gv;3.5<>3.0<>3.5<>{}
PAF_GLOB_VAR_DEF;var2<>000005.000<>f.php;5.5<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000005.000<>#<>var2<>gv;5.5<>5.0<>5.5<>{}
}

tcltest::test string-1.7 { single quoted string } {
    browse [save_file f.php {
<?
$var1 = '\'' .
    '\'';
$var2 = 1;
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_GLOB_VAR_DEF;var1<>000003.000<>f.php;3.5<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.000<>#<>var1<>gv;3.5<>3.0<>3.5<>{}
PAF_GLOB_VAR_DEF;var2<>000005.000<>f.php;5.5<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000005.000<>#<>var2<>gv;5.5<>5.0<>5.5<>{}
}

tcltest::test string-1.8 { double quoted string } {
    browse [save_file f.php {
<?
$var1 = "HELLO
    THERE";
$var2 = 1;
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_GLOB_VAR_DEF;var1<>000003.000<>f.php;3.5<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.000<>#<>var1<>gv;3.5<>3.0<>3.5<>{}
PAF_GLOB_VAR_DEF;var2<>000005.000<>f.php;5.5<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000005.000<>#<>var2<>gv;5.5<>5.0<>5.5<>{}
}

tcltest::test string-1.9 { single quoted string } {
    browse [save_file f.php {
<?
$var1 = 'HELLO
    THERE';
$var2 = 1;
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_GLOB_VAR_DEF;var1<>000003.000<>f.php;3.5<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.000<>#<>var1<>gv;3.5<>3.0<>3.5<>{}
PAF_GLOB_VAR_DEF;var2<>000005.000<>f.php;5.5<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000005.000<>#<>var2<>gv;5.5<>5.0<>5.5<>{}
}

tcltest::test string-2.0 { escape characters } {
    browse [save_file f.php {
<?
$var = "val\n";
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_GLOB_VAR_DEF;var<>000003.000<>f.php;3.4<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.000<>#<>var<>gv;3.4<>3.0<>3.4<>{}
}

tcltest::test string-2.1 { escape characters } {
    browse [save_file f.php {
<?
$var = 'val\n';
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_GLOB_VAR_DEF;var<>000003.000<>f.php;3.4<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.000<>#<>var<>gv;3.4<>3.0<>3.4<>{}
}


tcltest::test string-3.0 {  string spans multiple lines } {
    browse [save_file f.php {
<?
include "I am
a file";
?>
}]
} [format {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_INCLUDE_DEF;I am%sa file<>000003.009<>f.php;4.6<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.009<>#<>I am%sa file<>iu;4.6<>3.9<>4.6<>{}
} \xFF \xFF]

tcltest::test string-3.1 {  string spans multiple lines } {
    browse [save_file f.php {
<?
include 'I am
a file';
?>
}]
} [format {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_INCLUDE_DEF;I am%sa file<>000003.009<>f.php;4.6<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.009<>#<>I am%sa file<>iu;4.6<>3.9<>4.6<>{}
} \xFF \xFF]

tcltest::test string-4.0 { hit EOF in double quoted string } {
    browse [save_file f.php {
<?
"
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
}

tcltest::test string-4.1 { hit EOF in single quoted string } {
    browse [save_file f.php {
<?
'
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
}

tcltest::test string-5.0 { heredoc ignores all characters } {
    browse [save_file f.php {
<?
print <<<END
"HI
END;

$var = "one" . '"';
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_GLOB_VAR_DEF;var<>000007.000<>f.php;7.4<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000007.000<>#<>var<>gv;7.4<>7.0<>7.4<>{}
}


tcltest::test string-5.1 { hit EOF in heredoc string } {
    browse [save_file f.php {
<?
print <<< END
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
}

tcltest::test string-6.0 { no comments in double quoted string } {
    browse [save_file f.php {
<?
include("/*not-comment*/");
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_INCLUDE_DEF;/*not-comment*/<>000003.009<>f.php;3.24<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.009<>#<>/*not-comment*/<>iu;3.24<>3.9<>3.24<>{}
}

tcltest::test string-6.1 { no comments in single quoted string } {
    browse [save_file f.php {
<?
include('/*not-comment*/');
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_INCLUDE_DEF;/*not-comment*/<>000003.009<>f.php;3.24<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.009<>#<>/*not-comment*/<>iu;3.24<>3.9<>3.24<>{}
}

# FIXME: These next two are rather broken. The include statement
# should think the token starts at 4.0 and ends at 4.15 and
# does not include a \n. Currently, the impl assumes that
# a double quoted string starts at tok->start_line + 1
# which is not correct. Same goes for the end of the token.
# May need to add some sort of extended token that can
# handle a range inside the token boundry. On second thought
# this may not even be needed since the include statement
# does not do any highlighting anyway.

tcltest::test string-6.2 { no comments in heredoc string } {
    browse [save_file f.php {
<?
include <<<END
/*not-comment*/
END;
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_INCLUDE_DEF;/*not-comment*/<>000003.009<>f.php;5.2<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.009<>#<>/*not-comment*/<>iu;5.2<>3.9<>5.2<>{}
}

tcltest::test string-6.3 { newlines in heredoc string } {
    browse [save_file f.php {
<?
include <<<END
/*not-comment*/
/*not-comment*/
END;
?>
}]
} [format {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_INCLUDE_DEF;%s%s%s<>000003.009<>f.php;6.2<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.009<>#<>%s%s%s<>iu;6.2<>3.9<>6.2<>{}
} /*not-comment*/ \xFF /*not-comment*/ /*not-comment*/ \xFF /*not-comment*/]


tcltest::test string-7.0 { tokens for normal double quoted string } {
    filter_tokens HTML [browse_tokens [save_file f.php {
<?
"var"
?>
}]]
} {1 DOUBLE_QUOTED_STRING "var" 3.0 3.5}

tcltest::test string-7.1 { tokens for string with embedded vars } {
    filter_tokens HTML [browse_tokens [save_file f.php {
<?
"$var"
?>
}]]
} {1 VDOUBLE_QUOTED_STRING "$var" 3.0 3.6}

tcltest::test string-7.2 { tokens for string with embedded vars } {
    filter_tokens HTML [browse_tokens [save_file f.php {
<?
"$"
?>
}]]
} {1 DOUBLE_QUOTED_STRING "$" 3.0 3.3}

tcltest::test string-7.3 { no embedded vars for single quoted string } {
    filter_tokens HTML [browse_tokens [save_file f.php {
<?
'$var'
?>
}]]
} {1 SINGLE_QUOTED_STRING "$var" 3.0 3.6}

tcltest::test string-7.4 { tokens for string with embedded vars } {
    filter_tokens HTML [browse_tokens [save_file f.php {
<?
<<<END
$var
END;
?>
}]]
} {1 VDOUBLE_QUOTED_STRING "$var" 3.0 5.3
2 SEMICOLON "" 5.3 5.4}

tcltest::test string-7.5 { ignore var in single quoted string } {
    browse_xref [save_file f.php {
<?
print '$var';
?>
}]
} {}

tcltest::test string-7.6 { var in double quoted string read xref } {
    browse_xref [save_file f.php {
<?
print "$var";
?>
}]
} {PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>r<>000003<>f.php;<>
}

tcltest::test string-7.7 { var in heredoc string read xref } {
    browse_xref [save_file f.php {
<?
print <<<END
$var
END;
?>
}]
} {PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>r<>000004<>f.php;<>
}

tcltest::test string-7.8 { var in heredoc string read xref } {
    browse_xref [save_file f.php {
<?
print <<<END
$var $var
$var
END;
?>
}]
} {PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>r<>000004<>f.php;<>
PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>r<>000004<>f.php;<>
PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>r<>000005<>f.php;<>
}



# FIXME: Should we declare and define at the same time like the Java parser?

tcltest::test function-1.0 { function definition } {
    browse [save_file f.php {
<?
function foo() {}
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_FUNC_DEF;foo<>000003.000<>f.php;3.17<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.000<>#<>foo<>fu;3.17<>3.9<>3.12<>{}
}

tcltest::test function-1.1 { function definition } {
    browse [save_file f.php {
<?
function foo() {
}
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_FUNC_DEF;foo<>000003.000<>f.php;4.1<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.000<>#<>foo<>fu;4.1<>3.9<>3.12<>{}
}

tcltest::test function-1.2 { function definition } {
    browse [save_file f.php {
<?
function
foo() {
}
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_FUNC_DEF;foo<>000003.000<>f.php;5.1<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.000<>#<>foo<>fu;5.1<>4.0<>4.3<>{}
}

tcltest::test function-1.3 { function definition } {
    browse [save_file f.php {
<?
function
foo()
{
}
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_FUNC_DEF;foo<>000003.000<>f.php;6.1<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.000<>#<>foo<>fu;6.1<>4.0<>4.3<>{}
}

tcltest::test function-1.4 { function definition } {
    browse [save_file f.php {
<?
function foo 
() {}
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_FUNC_DEF;foo<>000003.000<>f.php;4.5<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.000<>#<>foo<>fu;4.5<>3.9<>3.12<>{}
}

tcltest::test function-1.5 { function definition } {
    browse [save_file f.php {
<?
  function	stop_go()	{} 
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_FUNC_DEF;stop_go<>000003.002<>f.php;3.23<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.002<>#<>stop_go<>fu;3.23<>3.11<>3.18<>{}
}

tcltest::test function-1.6 { function definition } {
    browse [save_file f.php {
<?
function foo() {
  if (1) {}
}
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_FUNC_DEF;foo<>000003.000<>f.php;5.1<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.000<>#<>foo<>fu;5.1<>3.9<>3.12<>{}
}



tcltest::test function-2.0 { function definition w arguments } {
    browse [save_file f.php {
<?
function foo($arg1) {}
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_FUNC_DEF;foo<>000003.000<>f.php;3.22<>0x0<>{}<>{}<>{arg1}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.000<>#<>foo<>fu;3.22<>3.9<>3.12<>{}
}

tcltest::test function-2.1 { function definition w arguments } {
    browse [save_file f.php {
<?
function foo($arg1,$arg2) {}
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_FUNC_DEF;foo<>000003.000<>f.php;3.28<>0x0<>{}<>{}<>{arg1,arg2}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.000<>#<>foo<>fu;3.28<>3.9<>3.12<>{}
}

tcltest::test function-2.2 { function definition w arguments } {
    browse [save_file f.php {
<?
function foo($arg1 = "default") {}
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_FUNC_DEF;foo<>000003.000<>f.php;3.34<>0x0<>{}<>{}<>{arg1}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.000<>#<>foo<>fu;3.34<>3.9<>3.12<>{}
}

tcltest::test function-2.3 { function definition w arguments } {
    browse [save_file f.php {
<?
function foo($arg1 = "default", $arg2=1, $arg3 = 'default') {}
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_FUNC_DEF;foo<>000003.000<>f.php;3.62<>0x0<>{}<>{}<>{arg1,arg2,arg3}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.000<>#<>foo<>fu;3.62<>3.9<>3.12<>{}
}


tcltest::test function-2.4 { function definition w arguments } {
    browse [save_file f.php {
<?
function foo(&$arg1) {}
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_FUNC_DEF;foo<>000003.000<>f.php;3.23<>0x0<>{}<>{}<>{arg1}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.000<>#<>foo<>fu;3.23<>3.9<>3.12<>{}
}

tcltest::test function-2.5 { function definition w arguments } {
    browse [save_file f.php {
<?
function foo(
	$arg1,
	$arg2,
	$arg3) {}
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_FUNC_DEF;foo<>000003.000<>f.php;6.10<>0x0<>{}<>{}<>{arg1,arg2,arg3}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.000<>#<>foo<>fu;6.10<>3.9<>3.12<>{}
}




tcltest::test function-3.0 { xref to function in function } {
    browse_xref [save_file f.php {
<?
function foo() {
    bar();
}
?>
}]
} {PAF_CROSS_REF;#<>foo<>fu<>#<>bar<>fu<>p<>000004<>f.php;<>
}

tcltest::test function-3.1 { xref to function in function } {
    browse_xref [save_file f.php {
<?
bar
();
function foo() {
    bar();
}
?>
}]
} {PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>bar<>fu<>p<>000003<>f.php;<>
PAF_CROSS_REF;#<>foo<>fu<>#<>bar<>fu<>p<>000006<>f.php;<>
}

tcltest::test function-3.2 { reset current function name } {
    browse_xref [save_file f.php {
<?
function foo_one() {bar();}
bar();
function foo_two() {bar ();}
?>
}]
} {PAF_CROSS_REF;#<>foo_one<>fu<>#<>bar<>fu<>p<>000003<>f.php;<>
PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>bar<>fu<>p<>000004<>f.php;<>
PAF_CROSS_REF;#<>foo_two<>fu<>#<>bar<>fu<>p<>000005<>f.php;<>
}

tcltest::test function-3.3 { exit php mode inside a function } {
    browse_xref [save_file f.php {
<?
function foo() {
   ?>HTML call()<?
   bar();
}
?>
}]
} {PAF_CROSS_REF;#<>foo<>fu<>#<>bar<>fu<>p<>000005<>f.php;<>
}

tcltest::test function-3.4 { keywords not seen as call xref } {
    browse_xref [save_file f.php {
<?
function foo() {
    if (1)
        bar();
}
?>
}]
} {PAF_CROSS_REF;#<>foo<>fu<>#<>bar<>fu<>p<>000005<>f.php;<>
}

tcltest::test function-3.5 { keywords not seen as call xref } {
    browse_xref [save_file f.php {
<?
array();
?>
}]
} {}

tcltest::test function-3.6 { function result as function argument } {
    browse_xref [save_file f.php {
<?
bar(
    bar());
?>
}]
} {PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>bar<>fu<>p<>000003<>f.php;<>
PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>bar<>fu<>p<>000004<>f.php;<>
}

tcltest::test function-4.0 { function not finished at EOF } {
    browse [save_file f.php "
<?
function foo() \{
?>
"]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_FUNC_DEF;foo<>000003.000<>f.php;5.0<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.000<>#<>foo<>fu;5.0<>3.9<>3.12<>{}
}

tcltest::test function-4.1 { function not finished at EOF } {
    save_file f1.php "
<?
function foo() \{
?>
"
    save_file f2.php {
<?
function bar() {}
?>
}

    save_file files {
f1.php
f2.php
}

    set results [browse .php {-y files}]
    file delete files f1.php f2.php
    set results
} {Status: Parsing: f1.php
PAF_FILE;f1.php;php<>
PAF_FUNC_DEF;foo<>000003.000<>f1.php;5.0<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f1.php<>000003.000<>#<>foo<>fu;5.0<>3.9<>3.12<>{}
Status: Parsing: f2.php
PAF_FILE;f2.php;php<>
PAF_FUNC_DEF;bar<>000003.000<>f2.php;3.17<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f2.php<>000003.000<>#<>bar<>fu;3.17<>3.9<>3.12<>{}
}

tcltest::test function-4.2 { syntax error leads to nested function } {knownbug} {
    browse [save_file f.php {
<?
function foo() {'}
'
function bar() {}
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_FUNC_DEF;foo<>000003.000<>f.php;6.0<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.000<>#<>foo<>fu;6.0<>3.9<>3.12<>{}
PAF_FUNC_DEF;foo<>000005.000<>f.php;5.17<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000005.000<>#<>bar<>fu;5.17<>3.9<>3.12<>{}
}


tcltest::test include-1.0 { include a file } {
    browse [save_file f.php {
<?
    include("f2.php");
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_INCLUDE_DEF;f2.php<>000003.013<>f.php;3.19<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.013<>#<>f2.php<>iu;3.19<>3.13<>3.19<>{}
}

tcltest::test include-1.1 { include a file } {
    browse [save_file f.php {
<?
    include ("f2.php");
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_INCLUDE_DEF;f2.php<>000003.014<>f.php;3.20<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.014<>#<>f2.php<>iu;3.20<>3.14<>3.20<>{}
}

tcltest::test include-1.2 { include a file } {
    browse [save_file f.php {
<?
	include "f2.php";
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_INCLUDE_DEF;f2.php<>000003.010<>f.php;3.16<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.010<>#<>f2.php<>iu;3.16<>3.10<>3.16<>{}
}

tcltest::test include-1.3 { include a file } {
    browse [save_file f.php {
<?
	include 'f2.php';
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_INCLUDE_DEF;f2.php<>000003.010<>f.php;3.16<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.010<>#<>f2.php<>iu;3.16<>3.10<>3.16<>{}
}

tcltest::test include-1.4 { include a file } {
    browse [save_file f.php {
<?
include
'f2.php';
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_INCLUDE_DEF;f2.php<>000004.001<>f.php;4.7<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000004.001<>#<>f2.php<>iu;4.7<>4.1<>4.7<>{}
}

tcltest::test include-1.5 { include a file } {
    browse [save_file f.php {
<?
include( "f2.php" );
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_INCLUDE_DEF;f2.php<>000003.010<>f.php;3.16<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.010<>#<>f2.php<>iu;3.16<>3.10<>3.16<>{}
}

tcltest::test include-1.6 { include a file } {
    browse [save_file f.php {
<?
include(	"f2.php"	);
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_INCLUDE_DEF;f2.php<>000003.010<>f.php;3.16<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.010<>#<>f2.php<>iu;3.16<>3.10<>3.16<>{}
}

tcltest::test include-1.7 { include two files } {
    browse [save_file f.php {
<?
include('one.php');
include('two.php');
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_INCLUDE_DEF;one.php<>000003.009<>f.php;3.16<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.009<>#<>one.php<>iu;3.16<>3.9<>3.16<>{}
PAF_INCLUDE_DEF;two.php<>000004.009<>f.php;4.16<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000004.009<>#<>two.php<>iu;4.16<>4.9<>4.16<>{}
}

tcltest::test include-1.8 { include two files } {
    browse [save_file f.php {
<?
include('one.php'); include('two.php');
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_INCLUDE_DEF;one.php<>000003.009<>f.php;3.16<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.009<>#<>one.php<>iu;3.16<>3.9<>3.16<>{}
PAF_INCLUDE_DEF;two.php<>000003.029<>f.php;3.36<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.029<>#<>two.php<>iu;3.36<>3.29<>3.36<>{}
}

# This one is really tricky to deal with because the scanner
# would have already eaten up the ; from the previous match.
# We don't want to match on things that are not the whole
# keyword. This might only be fixable by moving to a
# bnf based parser.

tcltest::test include-1.9 { include two files } {
    browse [save_file f.php {
<?
include('one.php');include('two.php');
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_INCLUDE_DEF;one.php<>000003.009<>f.php;3.16<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.009<>#<>one.php<>iu;3.16<>3.9<>3.16<>{}
PAF_INCLUDE_DEF;two.php<>000003.028<>f.php;3.35<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.028<>#<>two.php<>iu;3.35<>3.28<>3.35<>{}
}

tcltest::test include-1.10 { not an include keyword } {
    browse [save_file f.php {
<?
notinclude 'f1.php';
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
}

tcltest::test include-1.11 { not an include keyword } {
    browse [save_file f.php {
<?
not_include 'f1.php';
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
}

tcltest::test include-2.0 { other include keywords } {
    browse [save_file f.php {
<?
include("f2.php");
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_INCLUDE_DEF;f2.php<>000003.009<>f.php;3.15<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.009<>#<>f2.php<>iu;3.15<>3.9<>3.15<>{}
}

tcltest::test include-2.1 { other include keywords } {
    browse [save_file f.php {
<?
include_once("f2.php");
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_INCLUDE_DEF;f2.php<>000003.014<>f.php;3.20<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.014<>#<>f2.php<>iu;3.20<>3.14<>3.20<>{}
}

tcltest::test include-2.3 { other include keywords } {
    browse [save_file f.php {
<?
require("f2.php");
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_INCLUDE_DEF;f2.php<>000003.009<>f.php;3.15<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.009<>#<>f2.php<>iu;3.15<>3.9<>3.15<>{}
}

tcltest::test include-2.4 { other include keywords } {
    browse [save_file f.php {
<?
require_once("f2.php");
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_INCLUDE_DEF;f2.php<>000003.014<>f.php;3.20<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.014<>#<>f2.php<>iu;3.20<>3.14<>3.20<>{}
}

tcltest::test include-2.5 { can't include filename with embedded vars } {
    browse [save_file f.php {
<?
require_once("$var.php");
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
}

tcltest::test operator-1.0 { assignment operator } {
    browse_xref [save_file f.php {
<?
$var = 1;
?>
}]
} {PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>w<>000003<>f.php;<>
}

tcltest::test operator-1.3 { assignment operators } {
    browse_xref [save_file f.php {
<?
$var += 1;
$var -= 1;
$var *= 1;
$var /= 1;
$var .= 1;
$var %= 1;
$var &= 1;
$var |= 1;
$var ^= 1;
$var <<= 1;
$var >>= 1;
?>
}]
} {PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>r<>000003<>f.php;<>
PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>w<>000003<>f.php;<>
PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>r<>000004<>f.php;<>
PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>w<>000004<>f.php;<>
PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>r<>000005<>f.php;<>
PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>w<>000005<>f.php;<>
PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>r<>000006<>f.php;<>
PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>w<>000006<>f.php;<>
PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>r<>000007<>f.php;<>
PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>w<>000007<>f.php;<>
PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>r<>000008<>f.php;<>
PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>w<>000008<>f.php;<>
PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>r<>000009<>f.php;<>
PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>w<>000009<>f.php;<>
PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>r<>000010<>f.php;<>
PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>w<>000010<>f.php;<>
PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>r<>000011<>f.php;<>
PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>w<>000011<>f.php;<>
PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>r<>000012<>f.php;<>
PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>w<>000012<>f.php;<>
PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>r<>000013<>f.php;<>
PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>w<>000013<>f.php;<>
}



tcltest::test operator-2.0 { not an assignment operator } {
    browse_xref [save_file f.php {
<?
$var == 1;
?>
}]
} {PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>r<>000003<>f.php;<>
}

tcltest::test operator-2.1 { not an assignment operator } {
    browse_xref [save_file f.php {
<?
$var === 1;
?>
}]
} {PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>r<>000003<>f.php;<>
}

tcltest::test operator-2.2 { not an assignment operator } {
    browse_xref [save_file f.php {
<?
$var != 1;
?>
}]
} {PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>r<>000003<>f.php;<>
}

tcltest::test operator-2.3 { not an assignment operator } {
    browse_xref [save_file f.php {
<?
$var . = 1;
$var , = 1;
?>
}]
} {PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>r<>000003<>f.php;<>
PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>r<>000004<>f.php;<>
}

tcltest::test operator-2.4 { not an assignment operator } {
    browse_xref [save_file f.php {
<?
$var > = 1;
$var < = 1;
$var ! = 1;
$var and 1;
?>
}]
} {PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>r<>000003<>f.php;<>
PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>r<>000004<>f.php;<>
PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>r<>000005<>f.php;<>
PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>r<>000006<>f.php;<>
}





tcltest::test multi-1.0 { process multiple files } {
    save_file f1.php {
<?
function foo() {}
?>
}
    save_file f2.php {
<?
function bar() {}
?>
}

    save_file files {
f1.php
f2.php
}

    set results [browse .php {-y files}]
    file delete files f1.php f2.php
    set results
} {Status: Parsing: f1.php
PAF_FILE;f1.php;php<>
PAF_FUNC_DEF;foo<>000003.000<>f1.php;3.17<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f1.php<>000003.000<>#<>foo<>fu;3.17<>3.9<>3.12<>{}
Status: Parsing: f2.php
PAF_FILE;f2.php;php<>
PAF_FUNC_DEF;bar<>000003.000<>f2.php;3.17<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f2.php<>000003.000<>#<>bar<>fu;3.17<>3.9<>3.12<>{}
}

# FIXME: Add check for function call inside function arguments,
# is that valid? Later: I don't think this is valid, if we
# don't match a known pattern the whole function decl is
# ignored, is that the right approach to take or should
# we still process the function even if the args are confused?

# FIXME: Check for parens inside function argument, what if
# they are not matched?

# FIXME: What if a function call includes a syntax error,
# should we still see this as a function invocation?
# for example "foo(];" or "foo(;" does the close paren
# need to be there for a function call to be seen?

# We don't currently report a function name when inserting
# comments. Not clear how we would implement this since
# comments are stripped before token matching.
# It might also be good to check the return value
# of the sn_insert_comment if there is one.

# When should we do with  <? CODE ?> when already in PHP mode?

# The docs for function don't mention this usage, but I noticed
# an example like "func($ref=$defaultValue) { ... }", should this be supported?

# There seems to be a double var deref syntax that I have not
# seen before:
# function show($arrayName) {
#     global $$arrayName;
#     print_r($$arrayName);
# )
# show('myArray');
 
# FIXME: Are there any cases where a DOUBLE_QUOTED_STRING
# is accepted but a VDOUBLE_QUOTED_STRING is not or vice
# versa. I think the include case is handled properly, but
# what about others?

# FIXME: Add test case for highlight of vars inside a double
# quoted string once that is implemented.

# FIXME: When if $var['hi'] appears in heredoc does that
# just match $var and ignore the rest?

# FIXME: Add support for super globals, vars that are
# global even if they are not in the global table.
#
# $GLOBALS, $_SERVER, $_GET, $_POST, $_COOKIE, $_FILES
# $_ENV, $_REQUEST, $_SESSION

# Should the global variable access symbol be extended
# to include the full text of the global? This would
# make is so that '$var[0] = 1;" would see a define
# range of 0 to 7 instead of just 1 to 4. That would
# make the combobox display the variable name over
# the whole range instead of just over the highlight.

# Add tests for CRLF line ending and a missing \n at
# the end of the file. The input layer should convert
# \r\n to \n and add a \n to the end of the file if
# one does not exist!

# cleanup
file delete f.php
file delete xout
file delete tout
file delete hout
::tcltest::cleanupTests
return
