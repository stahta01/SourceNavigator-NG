source testutil.tcl


tcltest::test mode-1.0 { skip html code } {
    php_parse [save_file f.php {
<HTML>
My HTML is $cash=money.
</HTML>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
}


tcltest::test mode-1.1 { skip html code } {
    php_parse [save_file f.php {
<HTML>
function foo() {}
</HTML>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
}


tcltest::test mode-2.0 { php mode } {
    php_parse [save_file f.php {
<?
$mode="php";
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_GLOB_VAR_DEF;mode<>000003.001<>f.php;3.5<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.001<>#<>mode<>gv;3.5<>3.1<>3.5<>{}
}

tcltest::test mode-2.1 { php mode } {
    php_parse [save_file f.php {
<? $mode1="php"; ?>
$mode2="html";
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_GLOB_VAR_DEF;mode1<>000002.004<>f.php;2.9<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000002.004<>#<>mode1<>gv;2.9<>2.4<>2.9<>{}
}

tcltest::test mode-2.2 { php mode } {
    php_parse [save_file f.php {
$mode1="html";
<? $mode2="php"; ?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_GLOB_VAR_DEF;mode2<>000003.004<>f.php;3.9<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.004<>#<>mode2<>gv;3.9<>3.4<>3.9<>{}
}

tcltest::test mode-2.3 { html->php->html->php mode } {
    php_parse [save_file f.php {
$mode1="html";
<? $mode2="php"; ?>
$mode3="html";
<? $mode4="php"; ?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_GLOB_VAR_DEF;mode2<>000003.004<>f.php;3.9<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.004<>#<>mode2<>gv;3.9<>3.4<>3.9<>{}
PAF_GLOB_VAR_DEF;mode4<>000005.004<>f.php;5.9<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000005.004<>#<>mode4<>gv;5.9<>5.4<>5.9<>{}
}

tcltest::test mode-2.4 { php mode } {
    php_parse [save_file f.php {
<?php
$mode="php";
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_GLOB_VAR_DEF;mode<>000003.001<>f.php;3.5<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.001<>#<>mode<>gv;3.5<>3.1<>3.5<>{}
}




tcltest::test var-1.0 { var write } {
    php_parse [save_file f.php {
<?
$var=1;
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_GLOB_VAR_DEF;var<>000003.001<>f.php;3.4<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.001<>#<>var<>gv;3.4<>3.1<>3.4<>{}
}

tcltest::test var-1.1 { var read } {
    php_parse [save_file f.php {
<?
print $var;
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
}

tcltest::test var-1.2 { 2 var writes, checks column } {
    php_parse [save_file f.php {
<?
$var=1;$var=1;
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_GLOB_VAR_DEF;var<>000003.001<>f.php;3.4<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.001<>#<>var<>gv;3.4<>3.1<>3.4<>{}
PAF_GLOB_VAR_DEF;var<>000003.008<>f.php;3.11<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.008<>#<>var<>gv;3.11<>3.8<>3.11<>{}
}

tcltest::test var-1.2 { read then write, checks column } {
    php_parse [save_file f.php {
<?
$var;$var=1;
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_GLOB_VAR_DEF;var<>000003.006<>f.php;3.9<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.006<>#<>var<>gv;3.9<>3.6<>3.9<>{}
}

# FIXME: Should the global statement act as the variable define here?

tcltest::test var-1.3 { var write } {
    php_parse [save_file f.php {
<?
function foo() {
global $var;
$var = 1;
}
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_GLOB_VAR_DEF;var<>000005.001<>f.php;5.4<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000005.001<>#<>var<>gv;5.4<>5.1<>5.4<>{}
PAF_FUNC_DEF;foo<>000003.000<>f.php;6.1<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.000<>#<>foo<>fu;6.1<>3.9<>3.12<>{}
}

tcltest::test var-1.4 { var read } {
    php_parse [save_file f.php {
<?
function foo() {
global $var;
print $var;
}
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_FUNC_DEF;foo<>000003.000<>f.php;6.1<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.000<>#<>foo<>fu;6.1<>3.9<>3.12<>{}
}

# FIXME: The Tcl parser defines local var symbols only when
# the -l flag is passed. Should we do this too?

tcltest::test var-1.5 { local var write } {
    php_parse [save_file f.php {
<?
function foo() {
$var = 1;
}
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_LOCAL_VAR_DEF;var<>000004.001<>f.php;4.4<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000004.001<>#<>var<>lv;4.4<>4.1<>4.4<>{}
PAF_FUNC_DEF;foo<>000003.000<>f.php;5.1<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.000<>#<>foo<>fu;5.1<>3.9<>3.12<>{}
}

tcltest::test var-1.6 { local var read } {
    php_parse [save_file f.php {
<?
function foo() {
print $var;
}
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_FUNC_DEF;foo<>000003.000<>f.php;5.1<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.000<>#<>foo<>fu;5.1<>3.9<>3.12<>{}
}

tcltest::test var-2.0 { var write xref } {
    php_parse_xref [save_file f.php {
<?
$var=1;
?>
}]
} {PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>w<>000003<>f.php;<>
}

tcltest::test var-2.1 { var read xref } {
    php_parse_xref [save_file f.php {
<?
print $var;
?>
}]
} {PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>var<>gv<>r<>000003<>f.php;<>
}

tcltest::test var-2.2 { global statement is not a var read } {
    php_parse_xref [save_file f.php {
<?
function foo() {
    global $var;
}
?>
}]
} {}

tcltest::test var-2.3 { global var write xref } {
    php_parse_xref [save_file f.php {
<?
function foo() {
global $var;
$var=1;
}
?>
}]
} {PAF_CROSS_REF;#<>foo<>fu<>#<>var<>gv<>w<>000005<>f.php;<>
}

tcltest::test var-2.4 { global var read xref } {
    php_parse_xref [save_file f.php {
<?
function foo() {
global $var;
print $var;
}
?>
}]
} {PAF_CROSS_REF;#<>foo<>fu<>#<>var<>gv<>r<>000005<>f.php;<>
}


tcltest::test var-2.5 { no local var xref by default } {
    php_parse_xref [save_file f.php {
<?
function foo() {
$var=1;
}
?>
}]
} {}

tcltest::test var-2.6 { local var write xref } {
    php_parse_local_xref [save_file f.php {
<?
function foo() {
$var=1;
}
?>
}]
} {PAF_CROSS_REF;#<>foo<>fu<>#<>var<>lv<>w<>000004<>f.php;<>
}

tcltest::test var-2.7 { no local var xref by default } {
    php_parse_xref [save_file f.php {
<?
function foo() {
print $var;
}
?>
}]
} {}

tcltest::test var-2.8 { local var read xref } {
    php_parse_local_xref [save_file f.php {
<?
function foo() {
print $var;
}
?>
}]
} {PAF_CROSS_REF;#<>foo<>fu<>#<>var<>lv<>r<>000004<>f.php;<>
}


tcltest::test var-2.9 { local var write xref } {
    php_parse_local_xref [save_file f.php {
<?
function foo() {
global $nar;
$var=1;
}
?>
}]
} {PAF_CROSS_REF;#<>foo<>fu<>#<>var<>lv<>w<>000005<>f.php;<>
}

tcltest::test var-2.10 { local var read xref } {
    php_parse_local_xref [save_file f.php {
<?
function foo() {
global $nar;
print $var;
}
?>
}]
} {PAF_CROSS_REF;#<>foo<>fu<>#<>var<>lv<>r<>000005<>f.php;<>
}


tcltest::test comment-1.0 { comment } {
    php_parse [save_file f.php {
<?
//$var=1;
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
}

tcltest::test comment-1.1 { comment } {
    php_parse [save_file f.php {
<?
	//$var=1;
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
}

tcltest::test comment-1.2 { insert comment xref } {
    php_parse_comment_xref [save_file f.php {
<?
//$var=1;
?>
}]
} {PAF_COMMENT_DEF;f.php<>000003.002<>#<>#;$var=1;
}

tcltest::test comment-1.3 { insert comment xref } {
    php_parse_comment_xref [save_file f.php {
<?
	//$var=1;
?>
}]
} {PAF_COMMENT_DEF;f.php<>000003.003<>#<>#;$var=1;
}

tcltest::test comment-1.4 { comment } {
    php_parse [save_file f.php {
<?
/*$var=1;*/
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
}

tcltest::test comment-1.5 { insert comment xref } {
    php_parse_comment_xref [save_file f.php {
<?
/*$var=1;*/
?>
}]
} {PAF_COMMENT_DEF;f.php<>000003.002<>#<>#;$var=1;
}

tcltest::test comment-1.6 { insert comment xref } {
    php_parse_comment_xref [save_file f.php {
<?
/*
$var=1;
*/
?>
}]
} "PAF_COMMENT_DEF;f.php<>000003.002<>#<>#;\xFF\$var=1;\xFF\n"


tcltest::test comment-1.7 { insert comment xref } {
    php_parse_comment_xref [save_file f.php {<?/*
 * Hello
 */?>
}]
} "PAF_COMMENT_DEF;f.php<>000001.004<>#<>#;\xFF * Hello\xFF \n"

tcltest::test comment-1.8 { insert comment xref } {
    php_parse_comment_xref [save_file f.php {<?
/*
* Hello
*/
?>
}]
} "PAF_COMMENT_DEF;f.php<>000002.002<>#<>#;\xFF* Hello\xFF\n"

tcltest::test comment-1.9 { insert comment xref } {
    php_parse_comment_xref [save_file f.php {
<?
/*
 * Comments *
 * With * //* Stuff in them
 * are tricky */
?>
}]
} "PAF_COMMENT_DEF;f.php<>000003.002<>#<>#;\xFF * Comments *\xFF * With * //* Stuff in them\xFF * are tricky \n"

tcltest::test comment-1.10 { insert comment xref } {
    php_parse_comment_xref [save_file f.php {
<?
/*********
 * Hello *
 *********/
?>
}]
} "PAF_COMMENT_DEF;f.php<>000003.002<>#<>#;********\xFF * Hello *\xFF ********\n"

tcltest::test comment-1.11 { can't leave comment mode with ?> } {
    php_parse_comment_xref [save_file f.php {
<?
/*Comment ?>ONE<? Text*/
?>
}]
} {PAF_COMMENT_DEF;f.php<>000003.002<>#<>#;Comment ?>ONE<? Text
}



tcltest::test comment-2.0 { function with a comment } {
    php_parse [save_file f.php {
<?
function foo() { /* no-op */ }
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_FUNC_DEF;foo<>000003.000<>f.php;3.30<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.000<>#<>foo<>fu;3.30<>3.9<>3.12<>{}
}

tcltest::test comment-2.1 { insert comment xref in a function } {
    php_parse_comment_xref [save_file f.php {
<?
function foo() {
//no-op
    return;
}
?>
}]
} {PAF_COMMENT_DEF;f.php<>000004.002<>#<>#;no-op
}

tcltest::test comment-2.2 { insert comment xref in a function } {
    php_parse_comment_xref [save_file f.php {
<?
function foo() {
/*no-op*/
    return;
}
?>
}]
} {PAF_COMMENT_DEF;f.php<>000004.002<>#<>#;no-op
}

tcltest::test comment-2.3 { insert comment xref in a function } {
    php_parse_comment_xref [save_file f.php {
<?
function foo() {
    /*no-op*/
    bar();
}
?>
}]
} {PAF_COMMENT_DEF;f.php<>000004.006<>#<>#;no-op
PAF_CROSS_REF;#<>foo<>fu<>#<>bar<>fu<>p<>000005<>f.php;<>
}

tcltest::test comment-2.4 { insert comment xref in a function } {
    php_parse_comment_xref [save_file f.php {
<?
function foo() {
    bar();
    /*no-op*/
}
?>
}]
} {PAF_CROSS_REF;#<>foo<>fu<>#<>bar<>fu<>p<>000004<>f.php;<>
PAF_COMMENT_DEF;f.php<>000005.006<>#<>#;no-op
}





# FIXME: Should we declare and define at the same time like the Java parser?


tcltest::test function-1.0 { function definition } {
    php_parse [save_file f.php {
<?
function foo() {}
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_FUNC_DEF;foo<>000003.000<>f.php;3.17<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.000<>#<>foo<>fu;3.17<>3.9<>3.12<>{}
}

tcltest::test function-1.1 { function definition } {
    php_parse [save_file f.php {
<?
function foo() {
}
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_FUNC_DEF;foo<>000003.000<>f.php;4.1<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.000<>#<>foo<>fu;4.1<>3.9<>3.12<>{}
}

tcltest::test function-1.2 { function definition } {
    php_parse [save_file f.php {
<?
function
foo() {
}
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_FUNC_DEF;foo<>000003.000<>f.php;5.1<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.000<>#<>foo<>fu;5.1<>4.0<>4.3<>{}
}

tcltest::test function-1.3 { function definition } {
    php_parse [save_file f.php {
<?
function
foo()
{
}
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_FUNC_DEF;foo<>000003.000<>f.php;6.1<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.000<>#<>foo<>fu;6.1<>4.0<>4.3<>{}
}

tcltest::test function-1.4 { function definition } {
    php_parse [save_file f.php {
<?
function foo 
() {}
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_FUNC_DEF;foo<>000003.000<>f.php;4.5<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.000<>#<>foo<>fu;4.5<>3.9<>3.12<>{}
}

tcltest::test function-1.5 { function definition } {
    php_parse [save_file f.php {
<?
  function	stop_go()	{} 
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_FUNC_DEF;stop_go<>000003.000<>f.php;3.23<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.000<>#<>stop_go<>fu;3.23<>3.11<>3.18<>{}
}



tcltest::test function-2.0 { function definition w arguments } {
    php_parse [save_file f.php {
<?
function foo($arg1) {}
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_FUNC_DEF;foo<>000003.000<>f.php;3.22<>0x0<>{}<>{}<>{arg1}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.000<>#<>foo<>fu;3.22<>3.9<>3.12<>{}
}

tcltest::test function-2.1 { function definition w arguments } {
    php_parse [save_file f.php {
<?
function foo($arg1,$arg2) {}
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_FUNC_DEF;foo<>000003.000<>f.php;3.28<>0x0<>{}<>{}<>{arg1,arg2}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.000<>#<>foo<>fu;3.28<>3.9<>3.12<>{}
}

tcltest::test function-2.2 { function definition w arguments } {
    php_parse [save_file f.php {
<?
function foo($arg1 = "default") {}
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_FUNC_DEF;foo<>000003.000<>f.php;3.34<>0x0<>{}<>{}<>{arg1}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.000<>#<>foo<>fu;3.34<>3.9<>3.12<>{}
}

tcltest::test function-2.3 { function definition w arguments } {
    php_parse [save_file f.php {
<?
function foo($arg1 = "default", $arg2=1, $arg3 = 'default') {}
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_FUNC_DEF;foo<>000003.000<>f.php;3.62<>0x0<>{}<>{}<>{arg1,arg2,arg3}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.000<>#<>foo<>fu;3.62<>3.9<>3.12<>{}
}


tcltest::test function-2.4 { function definition w arguments } {
    php_parse [save_file f.php {
<?
function foo(&$arg1) {}
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_FUNC_DEF;foo<>000003.000<>f.php;3.23<>0x0<>{}<>{}<>{arg1}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.000<>#<>foo<>fu;3.23<>3.9<>3.12<>{}
}

tcltest::test function-2.5 { function definition w arguments } {
    php_parse [save_file f.php {
<?
function foo(
	$arg1,
	$arg2,
	$arg3) {}
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_FUNC_DEF;foo<>000003.000<>f.php;6.10<>0x0<>{}<>{}<>{arg1,arg2,arg3}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.000<>#<>foo<>fu;6.10<>3.9<>3.12<>{}
}




tcltest::test function-3.0 { xref to function in function } {
    php_parse_xref [save_file f.php {
<?
function foo() {
    bar();
}
?>
}]
} {PAF_CROSS_REF;#<>foo<>fu<>#<>bar<>fu<>p<>000004<>f.php;<>
}

tcltest::test function-3.1 { xref to function in function } {
    php_parse_xref [save_file f.php {
<?
bar
();
function foo() {
    bar();
}
?>
}]
} {PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>bar<>fu<>p<>000003<>f.php;<>
PAF_CROSS_REF;#<>foo<>fu<>#<>bar<>fu<>p<>000006<>f.php;<>
}

tcltest::test function-3.2 { reset current function name } {
    php_parse_xref [save_file f.php {
<?
function foo_one() {bar();}
bar();
function foo_two() {bar ();}
?>
}]
} {PAF_CROSS_REF;#<>foo_one<>fu<>#<>bar<>fu<>p<>000003<>f.php;<>
PAF_CROSS_REF;#<>GLOBAL<>fu<>#<>bar<>fu<>p<>000004<>f.php;<>
PAF_CROSS_REF;#<>foo_two<>fu<>#<>bar<>fu<>p<>000005<>f.php;<>
}

tcltest::test function-3.3 { exit php mode inside a function } {
    php_parse_xref [save_file f.php {
<?
function foo() {
   ?>HTML call()<?
   bar();
}
?>
}]
} {PAF_CROSS_REF;#<>foo<>fu<>#<>bar<>fu<>p<>000005<>f.php;<>
}


tcltest::test include-1.0 { include a file } {
    php_parse [save_file f.php {
<?
    include("f2.php");
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_INCLUDE_DEF;f2.php<>000003.013<>f.php;3.19<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.013<>#<>f2.php<>iu;3.19<>3.13<>3.19<>{}
}

tcltest::test include-1.1 { include a file } {
    php_parse [save_file f.php {
<?
    include ("f2.php");
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_INCLUDE_DEF;f2.php<>000003.014<>f.php;3.20<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.014<>#<>f2.php<>iu;3.20<>3.14<>3.20<>{}
}

tcltest::test include-1.2 { include a file } {
    php_parse [save_file f.php {
<?
	include "f2.php";
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_INCLUDE_DEF;f2.php<>000003.010<>f.php;3.16<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.010<>#<>f2.php<>iu;3.16<>3.10<>3.16<>{}
}

tcltest::test include-1.3 { include a file } {
    php_parse [save_file f.php {
<?
	include 'f2.php';
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_INCLUDE_DEF;f2.php<>000003.010<>f.php;3.16<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.010<>#<>f2.php<>iu;3.16<>3.10<>3.16<>{}
}

tcltest::test include-1.4 { include a file } {
    php_parse [save_file f.php {
<?
include
'f2.php';
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_INCLUDE_DEF;f2.php<>000004.001<>f.php;4.7<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000004.001<>#<>f2.php<>iu;4.7<>4.1<>4.7<>{}
}

tcltest::test include-1.5 { include a file } {
    php_parse [save_file f.php {
<?
include( "f2.php" );
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_INCLUDE_DEF;f2.php<>000003.010<>f.php;3.16<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.010<>#<>f2.php<>iu;3.16<>3.10<>3.16<>{}
}

tcltest::test include-1.6 { include a file } {
    php_parse [save_file f.php {
<?
include(	"f2.php"	);
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_INCLUDE_DEF;f2.php<>000003.010<>f.php;3.16<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.010<>#<>f2.php<>iu;3.16<>3.10<>3.16<>{}
}

tcltest::test include-1.7 { include two files } {
    php_parse [save_file f.php {
<?
include('one.php');
include('two.php');
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_INCLUDE_DEF;one.php<>000003.009<>f.php;3.16<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.009<>#<>one.php<>iu;3.16<>3.9<>3.16<>{}
PAF_INCLUDE_DEF;two.php<>000004.009<>f.php;4.16<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000004.009<>#<>two.php<>iu;4.16<>4.9<>4.16<>{}
}

tcltest::test include-1.8 { include two files } {
    php_parse [save_file f.php {
<?
include('one.php'); include('two.php');
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_INCLUDE_DEF;one.php<>000003.009<>f.php;3.16<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.009<>#<>one.php<>iu;3.16<>3.9<>3.16<>{}
PAF_INCLUDE_DEF;two.php<>000003.029<>f.php;3.36<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.029<>#<>two.php<>iu;3.36<>3.29<>3.36<>{}
}

# This one is really tricky to deal with because the scanner
# would have already eaten up the ; from the previous match.
# We don't want to match on things that are not the whole
# keyword. This might only be fixable by moving to a
# bnf based parser.

tcltest::test include-1.9 { include two files } {knownbug} {
    php_parse [save_file f.php {
<?
include('one.php');include('two.php');
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_INCLUDE_DEF;one.php<>000003.009<>f.php;3.16<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.009<>#<>one.php<>iu;3.16<>3.9<>3.16<>{}
PAF_INCLUDE_DEF;two.php<>000003.028<>f.php;3.35<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.028<>#<>two.php<>iu;3.35<>3.28<>3.35<>{}
}

tcltest::test include-1.10 { not an include keyword } {
    php_parse [save_file f.php {
<?
notinclude 'f1.php';
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
}

tcltest::test include-1.11 { not an include keyword } {
    php_parse [save_file f.php {
<?
not_include 'f1.php';
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
}

tcltest::test include-2.0 { other include keywords } {
    php_parse [save_file f.php {
<?
include("f2.php");
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_INCLUDE_DEF;f2.php<>000003.009<>f.php;3.15<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.009<>#<>f2.php<>iu;3.15<>3.9<>3.15<>{}
}

tcltest::test include-2.1 { other include keywords } {
    php_parse [save_file f.php {
<?
include_once("f2.php");
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_INCLUDE_DEF;f2.php<>000003.014<>f.php;3.20<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.014<>#<>f2.php<>iu;3.20<>3.14<>3.20<>{}
}

tcltest::test include-2.3 { other include keywords } {
    php_parse [save_file f.php {
<?
require("f2.php");
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_INCLUDE_DEF;f2.php<>000003.009<>f.php;3.15<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.009<>#<>f2.php<>iu;3.15<>3.9<>3.15<>{}
}

tcltest::test include-2.4 { other include keywords } {
    php_parse [save_file f.php {
<?
require_once("f2.php");
?>
}]
} {Status: Parsing: f.php
PAF_FILE;f.php;php<>
PAF_INCLUDE_DEF;f2.php<>000003.014<>f.php;3.20<>0x0<>{}<>{}<>{}<>{}
PAF_FILE_SYMBOLS;f.php<>000003.014<>#<>f2.php<>iu;3.20<>3.14<>3.20<>{}
}



# Need to add tests for string processing. Some variable
# recognition works inside strings but I don't think
# function calls should be seen in string literals.

# Need to fix array variable setting and reading.

# Add checks for include or require statements, so that
# the include browser can show file include relationships.

# Need to check strings that span multiple lines.

# FIXME: Add check for function call inside function arguments,
# is that valid?

# FIXME: Check for parens inside function argument, what if
# they are not matched?

# FIXME: I think we would loop forever if there was an extra
# OPEN_PAREN token in the function arg loop! (out of date)

# FIXME: What if a function call includes a syntax error,
# should we still see this as a function invocation?
# for example "foo(];" or "foo(;" does the close paren
# need to be there for a function call to be seen?

# Test "foo(foo());" to make sure tokens in a function
# call are being processed and not ignored.

# Test global statement with more than one variable.

# Test function argument init with string, single quoted string, and literals

# Should we create a token for commas and include them in the
# parse rules for things like function declarations and global statements?

# cleanup
file delete f.php
file delete xout
::tcltest::cleanupTests
return
