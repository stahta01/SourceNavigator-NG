dnl Process this file with autoconf to produce a configure script.
AC_INIT(configure)
AM_CONFIG_HEADER(config.h)

AM_INIT_AUTOMAKE(db, 1.85)

AC_CONFIG_AUX_DIR(..)
AC_CANONICAL_HOST

AC_PROG_INSTALL
AM_MAINTAINER_MODE
AC_PROG_MAKE_SET
AC_ARG_PROGRAM

dnl Configure setup.
AC_PROG_CC
AC_PROG_CPP

dnl Autoconf 2.13 get the executable suffix wrong with VC++
case "$host" in
  *windows32*)
    ac_cv_exeext=".exe"
    ;;
esac
AC_EXEEXT
AC_OBJEXT

dnl Checks for programs.
AC_CHECK_TOOL(AR, ar)
AC_CHECK_TOOL(RANLIB, ranlib)

AC_PATH_PROG(FALSE,false,:)
AC_PATH_PROG(SH,sh,$FALSE)
AC_PATH_PROG(SH5,sh5,$FALSE)
AC_PATH_PROG(BASH,bash,$FALSE)

# In the cygwin32 environment, we need some additional flags.
AC_CACHE_CHECK([for cygwin32], ide_cv_os_cygwin32,
[AC_EGREP_CPP(lose, [
#ifdef __CYGWIN32__
lose
#endif],[ide_cv_os_cygwin32=yes],[ide_cv_os_cygwin32=no])])
if test x$ide_cv_os_cygwin32 = xyes; then
  WINFLAGS="-DWIN32"
else
  WINFLAGS=
fi

# In the Microsoft Visual C++ compiler.
AC_CACHE_CHECK([for Microsoft Visual C++], sn_cv_os_msvc,
[AC_EGREP_CPP(coool, [
#ifdef _MSC_VER
coool
#endif],[sn_cv_os_msvc=yes],[sn_cv_os_msvc=no])])
if test $sn_cv_os_msvc = yes; then
  WINFLAGS="-DWIN32 -D__MSVC__ -I\$(srcdir)/Win32/include"
fi

# Using mingw32 (gcc for Windows)

AC_CACHE_CHECK([for Mingw32], sn_cv_os_mingw32,
[AC_EGREP_CPP(coool, [
#ifdef __MINGW32__
coool
#endif],[sn_cv_os_mingw32=yes],[sn_cv_os_mingw32=no])])
if test $sn_cv_os_mingw32 = yes; then
  WINFLAGS="-DWIN32 -I\$(srcdir)/Win32/include"
fi

AC_SUBST(WINFLAGS)

AC_CACHE_CHECK([checking for shell with functions],local_cv_program_fctsh,
[if $SH -c 'foo() { true; }; foo' > /dev/null 2>&1; then
	local_cv_program_fctsh=$SH
else
	if $SH5 -c 'foo() { true; }; foo' > /dev/null 2>&1; then
		local_cv_program_fctsh=$SH5
	else
		if $BASH -c 'foo() { true; }; foo' > /dev/null 2>&1; then
			local_cv_program_fctsh=$BASH
		else
			local_cv_program_fctsh=$FALSE
		fi
	fi
fi])

FCTSH=$local_cv_program_fctsh
AC_SUBST(FCTSH)

dnl Checks for libraries.

dnl Checks for header files.
AC_HEADER_DIRENT
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS(fcntl.h limits.h sys/time.h unistd.h)


# CYGNUS LOCAL
dnl AC_C_BIGENDIAN
AC_C_BIGENDIAN_CROSS
# END CYGNUS LOCAL
AC_C_CONST
AC_HEADER_TIME
AC_STRUCT_ST_BLKSIZE

AC_MSG_CHECKING(for u_char)
AC_CACHE_VAL(db_cv_type_u_char, [dnl
AC_TRY_COMPILE([#ifdef HAVE_UNISTD_H
#include <unistd.h>
#endif
#include <sys/types.h>
#if defined(__MINGW32__)
# include <winsock.h>
#endif
], [u_char c = '0';], db_cv_type_u_char=yes,
db_cv_type_u_char=no)])
AC_MSG_RESULT($db_cv_type_u_char)
if test "$db_cv_type_u_char" = yes; then
   AC_DEFINE(HAVE_UCHAR_T,,[Define if uchar_t (and friends) are defined.])
fi

dnl The macro invocation below is currently commented out in order
dnl to support configuring with autoconf 2.13. Once the move to
dnl 2.5X is made, the manual check below can be replaced with
dnl the call to AC_CHECK_TYPES.

dnl AC_CHECK_TYPES([ssize_t, size_t, mode_t, off_t, pid_t])

AC_MSG_CHECKING(for ssize_t)
AC_CACHE_VAL(db_cv_type_ssize_t, [dnl
AC_TRY_COMPILE([#ifdef HAVE_UNISTD_H
#include <unistd.h>
#endif
#include <sys/types.h>], [ssize_t c = '0';],
db_cv_type_ssize_t=yes,
db_cv_type_ssize_t=no)])
AC_MSG_RESULT($db_cv_type_ssize_t)
if test "$db_cv_type_ssize_t" = yes; then
   AC_DEFINE(HAVE_SSIZE_T,,[Define if ssize_t is defined.])
fi

AC_MSG_CHECKING(for size_t)
AC_CACHE_VAL(db_cv_type_size_t, [dnl
AC_TRY_COMPILE([#ifdef HAVE_UNISTD_H
#include <unistd.h>
#endif
#include <sys/types.h>], [size_t c = '0';],
db_cv_type_size_t=yes,
db_cv_type_size_t=no)])
AC_MSG_RESULT($db_cv_type_size_t)
if test "$db_cv_type_size_t" = yes; then
   AC_DEFINE(HAVE_SIZE_T,,[Define if size_t is defined.])
fi

AC_MSG_CHECKING(for mode_t)
AC_CACHE_VAL(db_cv_type_mode_t, [dnl
AC_TRY_COMPILE([#ifdef HAVE_UNISTD_H
#include <unistd.h>
#endif
#include <sys/types.h>], [mode_t c = '0';],
db_cv_type_mode_t=yes,
db_cv_type_mode_t=no)])
AC_MSG_RESULT($db_cv_type_mode_t)
if test "$db_cv_type_mode_t" = yes; then
   AC_DEFINE(HAVE_MODE_T,,[Define if mode_t is defined.])
fi

AC_MSG_CHECKING(for off_t)
AC_CACHE_VAL(db_cv_type_off_t, [dnl
AC_TRY_COMPILE([#ifdef HAVE_UNISTD_H
#include <unistd.h>
#endif
#include <sys/types.h>], [off_t c = '0';],
db_cv_type_off_t=yes,
db_cv_type_off_t=no)])
AC_MSG_RESULT($db_cv_type_off_t)
if test "$db_cv_type_off_t" = yes; then
   AC_DEFINE(HAVE_OFF_T,,[Define if off_t is defined.])
fi

AC_MSG_CHECKING(for pid_t)
AC_CACHE_VAL(db_cv_type_pid_t, [dnl
AC_TRY_COMPILE([#ifdef HAVE_UNISTD_H
#include <unistd.h>
#endif
#include <sys/types.h>], [pid_t c = '0';],
db_cv_type_pid_t=yes,
db_cv_type_pid_t=no)])
AC_MSG_RESULT($db_cv_type_pid_t)
if test "$db_cv_type_pid_t" = yes; then
   AC_DEFINE(HAVE_PID_T,,[Define if pid_t is defined.])
fi

dnl Checks for library functions.
AC_FUNC_VPRINTF
AC_FUNC_MMAP
AC_CHECK_FUNCS(mkdir rmdir select mkstemp)
AC_REPLACE_FUNCS(memmove snprintf strerror)
# memcmp strdup
dnl Some versions of sprintf return a pointer to the first argument instead
dnl of a character count.  We assume that the return value of snprintf and
dnl vsprintf etc. will be the same as sprintf, and check the easy one.
dnl When cross compiling, we assume that ANSI standard character count.
AC_MSG_CHECKING(for sprintf return value)
AC_CACHE_VAL(db_cv_sprintf_count, [dnl
AC_TRY_RUN([main(){char buf[20]; exit(sprintf(buf, "XXX") != 3);}],
	[db_cv_sprintf_count=yes], [db_cv_sprintf_count=no],
	[db_cv_sprintf_count=no])])
if test "$db_cv_sprintf_count" = no; then
	AC_DEFINE(SPRINTF_RET_CHARPNT,,[Return type of sprintf.])
fi
AC_MSG_RESULT($db_cv_sprintf_count)

dnl Do some other checks.  Done via a macro because other packages
dnl have to use this to include db.h.
CY_AC_BERKELEY_DB

AC_OUTPUT([Makefile PORT/Makefile])
